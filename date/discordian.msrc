local days              = { @.( the discordian days )       }
local seasons           = { @.( the discordian seasons )    }
local holydays          = { @.( the discordian holydays )   }
local exclamations      = { @.(the discordian exclamations) }
local format_directives = { @.(the format directives)       }

local function leap_p(greg_year)
	return (greg_year%4==0) and (greg_year%100~=0 or greg_year%400==0)
end

local function greg2disc(gregorian)
	@.(normalize 'gregorian' to a date table)
	local ans = setmetatable({}, { __index = @.(formatting lookup func) })
	local yday = gregorian.yday - 1  -- zero-based yday
	ans.year = gregorian.year + 1166
	@.(adjust around tibs day)

	if ans.tibs then
		ans.yday, ans.day, ans.weekday, ans.season = -1, -1, -1, 1
	else
		ans.yday = yday
		ans.day = (yday % 73) + 1
		ans.weekday = (yday % 5) + 1
		ans.season = (yday // 73) + 1
	end

	-- notice holydays
	ans.is_holyday = ans.day == 5 or ans.day == 50

	return ans
end

@./ formatting lookup func / ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-- lookup the requested format code in the format_directives table,
-- stripping off the '%' if needed.
function(t,k)
	if k:sub(1,1) == '%' then k = k:sub(2) end
	local f = format_directives[k]
	return f and f(t)
end
@. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

@./ normalize 'gregorian' to a date table / ~~~~~~~~~~~~~~~~~~~~~~~~~
-- we need the os.date() table... so convert a UNIX epoch time to
-- one if needed.  Default to the current time if nil.
gregorian = gregorian or os.date('*t')
if type(gregorian) == 'number' then
	gregorian = os.date('*t', gregorian)
end
@. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

@./ adjust around tibs day / ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-- If this is a leap year, and the 60th day (index 59), then it is
-- indeed St. Tib's Day!  Adjust yday as needed.
if leap_p(gregorian.year) then
	if yday == 59 then
		ans.tibs = holydays.tibs
	elseif yday > 59 then
		-- on years with a St. Tib's day, adjust it away for calculations
		-- after Tib's.
		yday = yday - 1
	end
end
@. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

local function fmt(formatstr, gregorian)
	local disc = greg2disc(gregorian)
	if formatstr == '*t' then return disc end

	@.(set a sensible default format)
	@.(adjust the format string based on special days)
	
	return (formatstr:gsub('%%.', disc))
end

@./ set a sensible default format / ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-- if the user did not supply a format, pick a sensible one based on
-- the supplied (or not!) date
if not formatstr then
	formatstr = (gregorian and '%{%A, %B %d%}, %Y YOLD') or
		'Today is %{%A, the %e day of %B%} in the YOLD %Y%N%nCelebrate %H'
end
@. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

@./adjust the format string based on special days / ~~~~~~~~~~~~~~~~~
-- there are two special format codes, which aren't handled in the
-- discordian date metatable.  These are %{ ... %} which replaces
-- everything inside with "St. Tib's Day" on that day, and %N which
-- erases the rest of the string when it's not a holyday.
if not disc.tibs then
	formatstr = formatstr:gsub('%%[{}]','')
else
	local bstart = formatstr:find('%%{')
	while bstart do
		local bend = formatstr:find('%%}', bstart+2)
		formatstr = (formatstr:sub(1,bstart-1) .. disc.tibs ..
			(bend and formatstr:sub(bend+2) or ''))
		bstart = formatstr:find('%%{')
	end
end

-- handle %N now...
if disc.is_holyday then
	formatstr = formatstr:gsub('%%N','')
else 
	local nstart = formatstr:find('%%N')
	if nstart then formatstr = formatstr:sub(1,nstart-1) end
end
@. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

-- we are a module...
return {
	date = fmt,
}

@./ the discordian days/ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'Sweetmorn', 'SM',     'Boomtime', 'BT',
'Pungenday', 'PD',     'Prickle-Prickle', 'PP',
'Setting Orange', 'SO'
@. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

@./ the discordian seasons/ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'Chaos', 'Chs', 'Discord', 'Dsc', 'Confusion', 'Cfn', 
'Bureaucracy', 'Bcy',  'The Aftermath', 'Afm' 
@. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

@./ the discordian holydays/ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
tibs = "St. Tib's Day",
fives = {"Mungday", "Mojoday", "Syaday", "Zaraday", "Maladay"},
fifties = { "Chaoflux", "Discoflux", "Confuflux", "Bureflux", "Afflux" }
@. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

@./ the discordian exclamations/ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
"Hail Eris!", "All Hail Discordia!", "Kallisti!", "Fnord.", "Or not.",
"Wibble.", "Pzat!", "P'tang!", "Frink!", "Slack!", 'Praise "Bob"!', "Or kill me.",
-- randomness, from the Net and other places. Feel free to add (after
-- checking with the relevant authorities, of course).
"Grudnuk demand sustenance!", "Keep the Lasagna flying!",
"You are what you see.", "Or is it?", "This statement is false.",
"Lies and slander, sire!", "Hee hee hee!", "Hail Eris, Hack Linux!",
@. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

@./ the format directives / ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-- %% a literal percent-sign
['%'] = function (d) return '%' end,

-- %A the full name of the week
['A'] = function(d) return d.tibs or days[d.weekday * 2 - 1] end,

-- %a the abbreviated name of the week
['a'] = function(d) return d.tibs or days[d.weekday * 2] end,

 -- %B the full name of the season (i.e., Chaos)
['B'] = function (d) return seasons[d.season * 2 - 1] end,

-- %b the abbreviated name of the season (i.e., Chs)
['b'] = function (d) return seasons[d.season * 2] end,

-- %d the number of day in season (i.e., 23)
['d'] = function (d) return d.day end,

-- %e the ordinal number of day in season (i.e., 23rd)
['e'] = function (d) 
	local digit = d.day % 10
	local suffix = 'th'
	if     digit == 1 and d.day ~= 11 then suffix = 'st'
	elseif digit == 2 and d.day ~= 12 then suffix = 'nd'
	elseif digit == 3 and d.day ~= 13 then suffix = 'rd'
	end
	return tostring(d.day) .. suffix
end,

-- %H the name of current Holyday, or nil if it's not one
-- N.B. Tib's day is not a Holyday
['H'] = function (d) 
	if d.day == 5 then
		return holydays.fives[d.season]
	elseif d.day == 50 then
		return holydays.fifties[d.season]
	end
	return ''
end,

-- %n a newline
['n'] = function (d) return '\n' end,

-- %t a tab
['t'] = function (d) return '\t' end,

-- %X the number of days remaining until X-Day.
['X'] = function(d) @.(count down to X-Day) end,

-- %Y the year
['Y'] = function(d) return tostring(d.year) end,

-- %. Try it and see!
['.'] = function(d) return exclamations[math.random(#exclamations)] end,
@. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

@./ count down to X-Day / ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-- Fnord the ddate.c original source...
-- /* Code for counting down to X-Day, X-Day being Cfn 40, 3164 
--  *
--  * After `X-Day' passed without incident, the CoSG declared that it had 
--  * got the year upside down --- X-Day is actually in 8661 AD rather than 
--  * 1998 AD.
--  *
--  * Thus, the True X-Day is Cfn 40, 9827.
--  *
--  */
local last_year, cur_year = 8661, d.year - 1166  -- use gregorian years
local last_yday = 73 + 73 + 40 - 1               -- 0-based yday

-- is it after the end of times?
if cur_year > last_year then return -1 end

-- is it the final year?
if cur_year == last_year then
	return (d.yday > last_yday) and -1 or (last_yday - d.yday)
end

-- We are prior to 9827 YOLD, so...
-- start by counting the rest of the days this year, remembering to special-case
-- TIBS (unlike a certain ddate utility we know)
local total = d.tibs and (366 - 31 - 28) or 
	(365 - d.yday) + (leap_p(cur_year) and (d.yday < 59) and 1 or 0)
cur_year = cur_year + 1

-- count whole years til the end...
while cur_year < last_year do
	total = total + 365 + (leap_p(cur_year) and 1 or 0)
	cur_year = cur_year + 1
end
return total + last_yday
@. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

-- vim: filetype=lua:sw=4:tw=0:noet:ts=4:
